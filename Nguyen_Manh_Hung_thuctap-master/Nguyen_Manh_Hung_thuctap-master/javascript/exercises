Chú ý:
- Bài nào xong thì tich done [x]
- Bài nào lí thuyết có thể trả lời ngay dưới yêu cầu
- Bài thực hành t3hì e tạo file rồi code nhé
- Mỗi ngày sẽ tạo merge vào nhánh develop với commit message là ngày tháng năm
Bài 1:
# To-Do List
- [x] Tạo 1 file html, tạo một thẻ div dài + rộng 100px, căn nó ra giữa màn hình ( làm nhiều cách nhất có thể)
- [x] Vào trang https://flexboxfroggy.com/ và hoàn thành các câu hỏi
- [x] Cho 6 thẻ div như nhau, dùng grid css sao cho:
 + màn hình > 1280 px layout là 3 x 2 
 + màn hình > 720 px layout là 2 x 3
 + màn hình < 480 px layout là 1 x 6
- [x] Tạo một file js và nhúng vào file html, chạy thử console.log thành công. 
- [x] Em nhúng file js ở vị trí nào trong file html, để file js ở phần header có bị rủi ro gì không?
        + Nhúng vào phần header
        + Nhúng vào cuối body
    - Khi để file js ở header có thể có các rủi ro:
        + Làm chậm tốc độ tải trang web do file js phải chạy đầu tiên
        + Trang web có thể bị lỗi hoặc tải không hoàn chỉnh, không sử dụng được 1 số chức năng
        + Một số thao tác với DOM có thể bị lỗi nếu đặt file js ở header

Bài 2:
# To-Do List
- [x] E có cách nào để nhúng file js vào phần header mà vẫn đảm bảo không bị rủi ro trên không?
        + Sử dụng thuộc tính defer
        + Sử dụng thuộc tính async
- [x] - 34 + '33' + false = ? 
        + 34 + '33' + false = '3433false'
- [x] Tạo mảng có 300 phần tử object, mỗi object bao gồm thuộc tính name và age + console.log ra 
- [x] Hiển thị data lên màn hình data vừa console.log theo dạng bảng
- [x] Giả sử em có một phép toán gì đó hoặc logic gì đó muốn check kết quả thì e sẽ làm gì khi không có công cụ nào ngoài chorme dev tool? 
        + Gõ trực tiếp phép toán hoặc logic đó vào phần console của chrome dev tool
- [x] Sắp xếp mảng trên theo thứ tự age tăng dần
- [x] Khi sort một mảng thì có làm thay đổi mảng đó không, làm sao để sort mảng mà không làm thay đổi mảng gốc:
        + Có làm thay đổi mảng gốc, để không thay đổi trước khi sort chúng ta clone mảng gốc, rồi sắp xếp và in ra mảng đã clone.


Bài 3:
# To-Do List
- [x] cho biến a. viết câu lệnh check nếu a null/undefined/0/ '' /false thì log là a không có giá trị
- [x] cho biến b. viết câu lệnh check nếu b null/undefined/ '' /false thì log là b không có giá trị
- [x] cho biến c. viết câu lệnh check nếu a null/undefined thì log là c không có giá trị
- [x] tìm hiểu if else + viết câu lệnh if rút gọn check biến a nếu a > 10 thì log 'lơn hon' ngược lại log bé hơn
- [x] tìm hiểu switch case + làm bài sau: cho biến a từ 2 đến 7 , kiểm tra nếu a là thứ mấy trong tuần thì log ra text của thứ đó(vd a=2 -> Thứ Hai)
- [x] Cho một chuỗi string gồm chữ và số. Viết một hàm lấy ra số trong string đó và return là chuỗi chỉ gồm số
- [x] type of array là gì, typeof null là gì
        + typeof array là 1 object
        + typeof null là 1 object
- [x] revert một mảng có làm thay đổi mảng gốc ko? Làm sao để revert ko làm thay đổi mảng gốc
        + Có làm thay đổi mảng gốc, để tránh điều này chúng ta clone mảng trước khi revert và thao tác với mảng clone
- [x] - tìm hiểu js performance + làm bài
            for (let i = 0; i < arr.length; i++) {
            và 
            let l = arr.length;
            for (let i = 0; i < l; i++) {
            đoạn code nào tối ưu thời gian chạy hơn
        + Khi khai báo trước biến l sẽ tối ưu hơn do không cần phải tính lại l mỗi khi chạy vòng lặp


Bài 3:
# To-Do List
- [x] 
const obj = document.getElementById(""demo"");
obj.innerHTML = ""Hello"";
obj.style.display= ""Block"";
và
document.getElementById(""demo"").innerHTML = ""Hello"";
document.getElementById(""demo"").style.display= ""Block"";
cái nào tối ưu hơn
      + Trường hợp khai báo biến obj sẽ tối ưu hơn do
- [x] 99999999999999999 === 100000000000000000 tại sao, cách khắc phục
      + Do JS tự định nghĩa kiểu số là Number cho tất cả các số, và kiểu dữ liệu này chỉ lưu trữ chính xác 64 bit dữ liệu,
      nên sẽ xảy ra sai sót khi sử dụng số cực lớn
      + Cách khắc phục: sử dụng kiểu dữ liệu BigInt(99999999999999999) !=== BigInt(100000000000000000).
- [x] tạo hàm đệ quy tính giai thừa của n
- [x] tạo hàm đệ quy tính tổng từ 1 đến n
- [ ] 
cho nested object menu, hiển thị lên màn hình (image.png)
const nestedMenu = [
  {
    name: ""menu level 1"",
    child: [
      {
        name: ""menu level 2"",
      },
      {
        name: ""menu level 2"",
      },
    ],
  },
  {
    name: ""menu level 1"",
  },
  {
    name: ""menu level 1"",
    child: [
      {
        name: ""menu level 2"",
      },
      {
        name: ""menu level 2"",
        child: [
          {
            name: ""menu level 3"",
          },
        ],
      },
    ],
  },
];


